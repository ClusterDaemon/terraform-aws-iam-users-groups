When adding the initial http data sources and external programs,

╷
│ Error: Invalid for_each argument
│
│   on ../main.tf line 121, in data "http" "keybase":
│  121:   for_each = {
│  122:     for name, attributes in local.users : name => attributes.pgp_public_key
│  123:     if length(regexall("^keybase:[a-z0-9]+$", attributes.pgp_public_key)) > 0
│  124:   }
│     ├────────────────
│     │ local.users is map of object with 3 elements
│
│ The "for_each" map includes keys derived from resource attributes that cannot be determined until apply, and so Terraform cannot determine the
│ full set of keys that will identify the instances of this resource.
│
│ When working with unknown values in for_each, it's better to define the map keys statically in your configuration and place apply-time results
│ only in the map values.
│
│ Alternatively, you could use the -target planning option to first apply only the resources that the for_each value depends on, and then apply
│ a second time to fully converge.
╵
╷
│ Error: Invalid for_each argument
│
│   on ../main.tf line 121, in data "http" "keybase":
│  121:   for_each = {
│  122:     for name, attributes in local.users : name => attributes.pgp_public_key
│  123:     if length(regexall("^keybase:[a-z0-9]+$", attributes.pgp_public_key)) > 0
│  124:   }
│     ├────────────────
│     │ local.users is map of object with 1 element
│
│ The "for_each" map includes keys derived from resource attributes that cannot be determined until apply, and so Terraform cannot determine the
│ full set of keys that will identify the instances of this resource.
│
│ When working with unknown values in for_each, it's better to define the map keys statically in your configuration and place apply-time results
│ only in the map values.
│
│ Alternatively, you could use the -target planning option to first apply only the resources that the for_each value depends on, and then apply
│ a second time to fully converge.
